
##################################################
#                                                #
# DO NOT EDIT THIS FILE MANUALLY                 #
# AUTOMATICALLY CREATED WITH docker-builder.sh   #
#                                                #
##################################################
  

FROM ubuntu:14.04
MAINTAINER whatwedo GmbH <welove@whatwedo.ch>
ENV DEBIAN_FRONTEND noninteractive
ENV HOME /root
RUN export INITRD=no && \
mkdir -p /etc/container_environment && \
echo -n no > /etc/container_environment/INITRD && \
sed -i 's/^#\s*\(deb.*universe\)$/\1/g' /etc/apt/sources.list && \
sed -i 's/^#\s*\(deb.*multiverse\)$/\1/g' /etc/apt/sources.list && \
apt-get update -y && \
apt-get upgrade -y && \
apt-get install -y apt-transport-https ca-certificates software-properties-common && \
apt-get install -y language-pack-en && \
locale-gen en_US.UTF-8 && \
update-locale LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 && \
echo -n en_US.UTF-8 > /etc/container_environment/LANG && \
echo -n en_US.UTF-8 > /etc/container_environment/LC_CTYPE
ENV LANG en_US.UTF-8
RUN apt-get install localepurge
ENV TERM dumb
ADD files/upstart /bin
RUN chmod 755 /bin/upstart
CMD /bin/upstart
ADD files/firstboot /bin
RUN chmod 755 /bin/firstboot
VOLUME  ["/etc/firstboot"]
ADD files/motd /etc
RUN apt-get install -y curl less nano wget zip unzip supervisor rsyslog python-pip git-core && \
pip install supervisor-stdout
COPY files/supervisord/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY files/supervisord/cron.conf /etc/supervisor/conf.d/cron.conf
COPY files/supervisord/syslog.conf /etc/supervisor/conf.d/syslog.conf
RUN touch /var/log/syslog && chown syslog:adm /var/log/syslog && \
touch /var/log/cron.log && chown syslog:adm /var/log/cron.log && \
rm -f /etc/cron.daily/standard && \
rm -f /etc/cron.daily/upstart && \
rm -f /etc/cron.daily/dpkg && \
rm -f /etc/cron.daily/password && \
rm -f /etc/cron.weekly/fstrim && \
echo "force-unsafe-io" > /etc/dpkg/dpkg.cfg.d/02apt-speedup && \
echo "Acquire::http {No-Cache=True;};" > /etc/apt/apt.conf.d/no-cache && \
echo "#\0041/bin/bash" > /bin/start-rsyslog && \
echo "rm -f /var/run/rsyslogd.pid" >> /bin/start-rsyslog && \
echo "rsyslogd -n" >> /bin/start-rsyslog && \
chmod 755 /bin/start-rsyslog && \
apt-get update && apt-get install -y openssh-server && \
mkdir -p /var/run/sshd && \
echo "UseDNS no" >> /etc/ssh/sshd_config
COPY files/supervisord/sshd.conf /etc/supervisor/conf.d/sshd.conf
RUN apt-get install -y nginx libpcre3-dev libssl-dev zlib1g-dev && \
touch /var/log/nginx/access.log && \
touch /var/log/nginx/error.log && \
mkdir /etc/nginx/ssl && \
chown -R www-data:www-data /var/lib/nginx && \
mkdir /var/www && \
chown -R www-data:www-data /var/www/ && \
chmod -R 2755 /var/www/ && \
rm -rf /etc/nginx/sites-available/ && \
rm -rf /etc/nginx/sites-enabled/ && \
rm -rf /etc/nginx/conf.d/ && \
rm /etc/nginx/nginx.conf
ADD files/nginx-default /etc/nginx
RUN chown -R www-data /var/www/ && \
chmod -R 755 /var/www/
COPY files/supervisord/nginx.conf /etc/supervisor/conf.d/nginx.conf
RUN apt-get install -y git && \
apt-get update && apt-get install --no-install-recommends -y \
ca-certificates \
curl \
mercurial \
git-core
RUN curl -s https://storage.googleapis.com/golang/go1.5.2.linux-amd64.tar.gz | tar -v -C /usr/local -xz
ENV GOPATH /go
ENV GOROOT /usr/local/go
ENV PATH $PATH:/usr/local/go/bin:/go/bin
RUN apt-get update && apt-get install -y \
build-essential zlib1g-dev libyaml-dev libssl-dev libgdbm-dev \
libreadline-dev libncurses5-dev libffi-dev curl openssh-server \
checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev \
logrotate python-docutils pkg-config cmake nodejs libmysqlclient-dev \
mysql-client redis-tools
RUN mkdir /tmp/ruby && \
cd /tmp/ruby && curl -O --progress https://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.7.tar.gz && \
cd /tmp/ruby && echo 'e2e195a4a58133e3ad33b955c829bb536fa3c075  ruby-2.1.7.tar.gz' | shasum -c - && tar xzf ruby-2.1.7.tar.gz && \
cd /tmp/ruby && cd ruby-2.1.7 && ./configure --disable-install-rdoc && make && make install
RUN gem install bundler --no-ri --no-rdoc && \
adduser --disabled-login --gecos 'GitLab' git && \
sudo -u git -H git config --global core.autocrlf "input" && \
sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b 8-3-stable /home/git/gitlab && \
sudo -u git -H cp /home/git/gitlab/config/gitlab.yml.example /home/git/gitlab/config/gitlab.yml
ADD files/gitlab/gitlab.yml /home/git/gitlab/config/
RUN chown git /home/git/gitlab/config/ && \
sudo -u git -H cp /home/git/gitlab/config/secrets.yml.example /home/git/gitlab/config/secrets.yml && \
sudo -u git -H chmod 0600 /home/git/gitlab/config/secrets.yml && \
chown -R git /home/git/gitlab/log/ && \
chown -R git /home/git/gitlab/tmp/ && \
chmod -R u+rwX,go-w /home/git/gitlab/log/ && \
chmod -R u+rwX /home/git/gitlab/tmp/ && \
sudo -u git -H mkdir -p /home/git/gitlab/tmp/pid && \
sudo -u git -H mkdir -p /home/git/gitlab/tmp/sockets && \
sudo -u git -H mkdir -p /home/git/gitlab/tmp/backups && \
sudo -u git -H mkdir -p /home/git/gitlab/tmp/sessions && \
chmod -R u+rwX /home/git/gitlab/tmp/pids/ && \
chmod -R u+rwX /home/git/gitlab/tmp/sockets/ && \
chmod -R u+rwX /home/git/gitlab/tmp/backups/ && \
chmod -R u+rwX /home/git/gitlab/tmp/sessions/ && \
sudo -u git -H mkdir /home/git/gitlab/public/uploads && \
chmod -R 0750 /home/git/gitlab/public/uploads && \
chmod -R u+rwX /home/git/gitlab/builds/ && \
chmod -R u+rwX /home/git/gitlab/shared/artifacts/ && \
sudo -u git -H cp /home/git/gitlab/config/unicorn.rb.example /home/git/gitlab/config/unicorn.rb && \
sudo -u git -H cp /home/git/gitlab/config/initializers/rack_attack.rb.example /home/git/gitlab/config/initializers/rack_attack.rb && \
sudo -u git -H cp /home/git/gitlab/config/resque.yml.example /home/git/gitlab/config/resque.yml && \
sudo -u git -H cp /home/git/gitlab/config/database.yml.mysql /home/git/gitlab/config/database.yml && \
sudo -u git -H chmod o-rwx /home/git/gitlab/config/database.yml
RUN cd /home/git/gitlab && sudo -u git -H bundle install --deployment --without development test postgres aws kerberos
COPY files/gitlab/nginx.conf /etc/nginx/nginx.conf
RUN sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-workhorse.git /home/git/gitlab-workhorse && \
cd /home/git/gitlab-workhorse && sudo -u git -H git checkout 0.5.1
RUN cd /home/git/gitlab-workhorse && sudo -u git -H PATH=$PATH:/usr/local/go/bin:/go/bin ; make && \
echo 'cd /home/git/gitlab' >> /bin/firstboot && \
echo 'echo "configuring GitLab"' >> /bin/firstboot && \
echo 'sed -i s/^worker_processes.*/worker_processes\ ${UNICORN_WORKER_PROCESSES}/g config/unicorn.rb' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_HOST}}/${GITLAB_HOST}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_PORT}}/${GITLAB_PORT}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_HTTPS}}/${GITLAB_HTTPS}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_EMAIL_FROM}}/${GITLAB_EMAIL_FROM}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_EMAIL_DISPLAY_NAME}}/${GITLAB_EMAIL_DISPLAY_NAME}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_EMAIL_REPLY_TO}}/${GITLAB_EMAIL_REPLY_TO}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_DEFAULT_THEME}}/${GITLAB_DEFAULT_THEME}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_PROJECT_FEATURES_ISSUES}}/${GITLAB_PROJECT_FEATURES_ISSUES}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_PROJECT_FEATURES_MERGE_REQUEST}}/${GITLAB_PROJECT_FEATURES_MERGE_REQUEST}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_PROJECT_FEATURES_WIKI}}/${GITLAB_PROJECT_FEATURES_WIKI}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_PROJECT_FEATURES_SNIPPETS}}/${GITLAB_PROJECT_FEATURES_SNIPPETS}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_PROJECT_FEATURES_BUILDS}}/${GITLAB_PROJECT_FEATURES_BUILDS}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/{{GITLAB_BACKUP_KEEP_TIME}}/${GITLAB_BACKUP_KEEP_TIME}/g config/gitlab.yml' >> /bin/firstboot && \
echo 'sed -i s/#\ db_key_base\:$/db_key_base:\ ${GITLAB_DATABASE_SECRET_KEY}/g config/secrets.yml' >> /bin/firstboot && \
echo 'sed -i s@production\:.*@production\:\ ${REDIS_URL}@g config/resque.yml' >> /bin/firstboot && \
echo 'sed -i s/username\:.*/username\:\ ${DATABASE_USER}/g config/database.yml' >> /bin/firstboot && \
echo 'sed -i s/password\:.*/password\:\ "${DATABASE_PASSWORD}"/g config/database.yml' >> /bin/firstboot && \
echo 'sed -i s/database\:.*/database\:\ ${DATABASE_NAME}/g config/database.yml' >> /bin/firstboot && \
echo 'sed -i s/#\ host\:.*/host\:\ ${DATABASE_HOST}/g config/database.yml' >> /bin/firstboot && \
echo 'cp config/initializers/smtp_settings.rb.sample config/initializers/smtp_settings.rb' >> /bin/firstboot && \
echo 'sed -i s/address\:.*/address\:\ \"${GITLAB_EMAIL_SMTP_ADDRESS}\",/g config/initializers/smtp_settings.rb' >> /bin/firstboot && \
echo 'sed -i s/user_name\:.*/user_name\:\ \"${GITLAB_EMAIL_SMTP_USERNAME}\",/g config/initializers/smtp_settings.rb' >> /bin/firstboot && \
echo 'sed -i s/password\:.*/password\:\ \"${GITLAB_EMAIL_SMTP_PASSWORD}\",/g config/initializers/smtp_settings.rb' >> /bin/firstboot && \
echo 'sed -i s/domain\:.*/domain\:\ \"${GITLAB_EMAIL_SMTP_DOMAIN}\",/g config/initializers/smtp_settings.rb' >> /bin/firstboot && \
echo 'echo "Creating SSH Keys"' >> /bin/firstboot && \
echo 'echo -e "y\n"|sudo -u git -H ssh-keygen -q -t rsa -N "" -f /home/git/.ssh/id_rsa' >> /bin/firstboot && \
echo 'echo "Installing GitLab Shell"' >> /bin/firstboot && \
echo 'sudo -u git -H bundle exec rake gitlab:shell:install REDIS_URL=${REDIS_URL} RAILS_ENV=production' >> /bin/firstboot && \
echo 'sed -i s@gitlab_url\:.*@gitlab_url\:\ http\://127.0.0.1\:8080@g gitlab-shell/config.yml' >> /bin/firstboot && \
echo 'echo "Wait for MySQL to boot..."' >> /bin/firstboot && \
echo 'echo "while ! nc -z ${DATABASE_HOST} 3306; do sleep 3; done"' >> /bin/firstboot && \
echo 'echo "Installing GitLab"' >> /bin/firstboot && \
echo 'sudo -u git -H force=yes bundle exec rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=${GITLAB_ROOT_PASSWORD}' >> /bin/firstboot && \
echo 'echo "Precompiling assets"' >> /bin/firstboot && \
echo 'sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production' >> /bin/firstboot && \
echo 'echo "Installing Backup CronJob"' >> /bin/firstboot && \
echo 'sudo -u git -H crontab -l > /home/git/gitlab/tmp/cron' >> /bin/firstboot && \
echo 'echo "${GITLAB_BACKUP_CRON} cd /home/git/gitlab && bundle exec rake gitlab:backup:create RAILS_ENV=production" >> /home/git/gitlab/tmp/cron' >> /bin/firstboot && \
echo 'sudo -u git -H crontab /home/git/gitlab/tmp/cron' >> /bin/firstboot && \
echo 'sudo -u git -H rm /home/git/gitlab/tmp/cron' >> /bin/firstboot && \
echo 'echo ""' >> /bin/firstboot && \
echo 'echo "#########################"' >> /bin/firstboot && \
echo 'echo "# GitLab Setup finished #"' >> /bin/firstboot && \
echo 'echo "#########################"' >> /bin/firstboot && \
echo 'echo ""' >> /bin/firstboot
COPY files/supervisord/gitlab.conf /etc/supervisor/conf.d/gitlab.conf
RUN apt-get autoremove -y && \
apt-get clean -y && \
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
EXPOSE 22
EXPOSE 80
VOLUME /home/git/gitlab/tmp/backups
LABEL ch.whatwedo.image.base="whatwedo/gitlab"
